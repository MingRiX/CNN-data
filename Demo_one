from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
from tensorflow.keras.optimizers import RMSprop

'''
数据处理
'''
#创建两个数据生成器，指定scaling范围0-1
train_datagen = ImageDataGenerator(rescale=1/255)
validation_datagen = ImageDataGenerator(rescale=1/255)

#指向训练数据文件夹
train_generator = train_datagen.flow_from_directory(
    '/Users/mingrixiang/Desktop/训练与测试数据集/horse-or-human',    #训练数据所在文件夹
    target_size = (300, 300),    #指定输出尺寸
    batch_size = 32,
    class_mode = 'binary'   #指定二分类
)


#指向测试数据文件夹
validation_generator = validation_datagen.flow_from_directory(
    '/Users/mingrixiang/Desktop/训练与测试数据集/validation-horse-or-human',
    target_size = (300, 300),
    batch_size = 32,
    class_mode = 'binary'
)

"""
得到的数据样本与测试样本数量以及种类
Found 1027 images belonging to 2 classes.
Found 256 images belonging to 2 classes.
"""



"""
训练模型 CNN
"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(16, (3,3), activation = 'relu',
                           input_shape = (300, 300, 3)),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(32, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(64, (3,3), activation = 'relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(512, activation = 'relu'),
    tf.keras.layers.Dense(1,activation = 'sigmoid')
])

#损失函数

model.compile(
    loss = 'binary_crossentropy',
    optimizer = RMSprop(lr=0.001),
    metrics = ['acc']
              )

"""
训练模型
"""
history = model.fit(
    train_generator,
    epochs = 15,
    verbose = 1,
    validation_data = validation_generator,
    validation_steps = 8
)
